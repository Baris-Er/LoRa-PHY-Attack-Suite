options:
  parameters:
    author: ''
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: Selective_replay_attack
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: Not titled yet
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: center_freq
  id: variable
  parameters:
    comment: ''
    value: 868.125e6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [384, 16.0]
    rotation: 0
    state: true
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: 2.4e6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [240, 16.0]
    rotation: 0
    state: enabled
- name: epy_block_0
  id: epy_block
  parameters:
    _source_code: "import os\nimport numpy as np\nfrom gnuradio import gr\n\nclass\
      \ segment_threshold_recorder(gr.sync_block):\n    \"\"\"\n    This block processes\
      \ the incoming IQ stream by:\n      - Splitting the data into 0.5-second segments.\n\
      \      - If any sample in a segment exceeds a certain (linear) threshold,\n\
      \        that segment is considered part of a message.\n      - If no sample\
      \ in the segment is above the threshold, and there was an ongoing recording,\n\
      \        that segment marks the end of the message. The message is then saved\
      \ to disk with a dynamic filename\n        (e.g., msg_0.dat, msg_1.dat, \u2026\
      ).\n      - After that, it resumes searching for a new message.\n    \"\"\"\n\
      \    def __init__(self, threshold=0.300, samp_rate=2.4e6, output_dir=r\"C:\\\
      Users\\hakan\\Documents\\lora_recordings\"):\n        gr.sync_block.__init__(\n\
      \            self,\n            name=\"segment_threshold_recorder\",\n     \
      \       in_sig=[np.complex64],\n            out_sig=[]\n        )\n        self.threshold\
      \ = threshold\n        self.samp_rate = int(samp_rate)\n        self.segment_duration\
      \ = 0.5\n        self.chunk_size = int(self.samp_rate * self.segment_duration)\n\
      \        self.output_dir = output_dir\n        os.makedirs(self.output_dir,\
      \ exist_ok=True)\n\n        self.recording = False\n        self.current_message\
      \ = []\n        self.segment_buffer = []\n        self.msg_count = 0\n\n   \
      \ def work(self, input_items, output_items):\n        in0 = input_items[0]\n\
      \        self.segment_buffer.extend(in0)\n\n        while len(self.segment_buffer)\
      \ >= self.chunk_size:\n            segment = np.array(self.segment_buffer[:self.chunk_size],\
      \ dtype=np.complex64)\n            self.segment_buffer = self.segment_buffer[self.chunk_size:]\n\
      \n            if np.any(np.abs(segment) > self.threshold):\n               \
      \ if not self.recording:\n                    self.recording = True\n      \
      \              self.current_message = []\n                self.current_message.append(segment)\n\
      \            else:\n                if self.recording:\n                   \
      \ full_message = np.concatenate(self.current_message)\n                    filename\
      \ = os.path.join(self.output_dir, f\"msg_{self.msg_count}.dat\")\n         \
      \           self.msg_count += 1\n                    with open(filename, \"\
      wb\", buffering=0) as f:\n                        full_message.tofile(f)\n \
      \                   self.recording = False\n                    self.current_message\
      \ = []\n\n        return len(in0)\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    output_dir: '''C:\\Users\\hakan\\Documents\\lora_recordings'''
    samp_rate: samp_rate
    threshold: '0.300'
  states:
    _io_cache: "('segment_threshold_recorder', 'segment_threshold_recorder', [('threshold',\
      \ '0.3'), ('samp_rate', '2400000.0'), ('output_dir', \"'C:\\\\\\\\Users\\\\\\\
      \\hakan\\\\\\\\Documents\\\\\\\\lora_recordings'\")], [('0', 'complex', 1)],\
      \ [], '\\n    This block processes the incoming IQ stream by:\\n      - Splitting\
      \ the data into 0.5-second segments.\\n      - If any sample in a segment exceeds\
      \ a certain (linear) threshold,\\n        that segment is considered part of\
      \ a message.\\n      - If no sample in the segment is above the threshold, and\
      \ there was an ongoing recording,\\n        that segment marks the end of the\
      \ message. The message is then saved to disk with a dynamic filename\\n    \
      \    (e.g., msg_0.dat, msg_1.dat, \u2026).\\n      - After that, it resumes\
      \ searching for a new message.\\n    ', ['output_dir', 'samp_rate', 'threshold'])"
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [912, 232.0]
    rotation: 0
    state: enabled
- name: epy_block_1
  id: epy_block
  parameters:
    _source_code: "import os\nimport numpy as np\nfrom gnuradio import gr\nfrom PyQt5\
      \ import QtWidgets, QtCore\n\nclass gui_file_source(gr.sync_block):\n    \"\"\
      \"\n    This block creates a GUI (combo box, refresh button, and send button)\
      \ listing message files \n    (msg_*.dat or msg_*.bin) in the specified directory\
      \ (e.g., \"C:\\\\Users\\\\hakan\\\\Documents\\\\lora_recordings\"). \n    Once\
      \ the user selects a file and clicks the \"Send\" button, the file is read via\
      \ np.fromfile() and replayed \n    as an IQ (np.complex64) stream. After the\
      \ entire file has been sent (when replay is finished), \n    the block produces\
      \ zero (0) samples and waits for a new selection.\n    \"\"\"\n    def __init__(self,\
      \ directory=r\"C:\\Users\\hakan\\Documents\\lora_recordings\"):\n        gr.sync_block.__init__(\n\
      \            self,\n            name=\"gui_file_source\",\n            in_sig=None,\n\
      \            out_sig=[np.complex64]\n        )\n        self.directory = directory\n\
      \        self.data = None\n        self.pointer = 0\n        self.file_selected\
      \ = False\n        self.pending_file = None\n        QtCore.QTimer.singleShot(0,\
      \ self._init_gui)\n\n    def _init_gui(self):\n        app = QtWidgets.QApplication.instance()\n\
      \        if app is None:\n            app = QtWidgets.QApplication([])\n   \
      \     self.widget = QtWidgets.QWidget()\n        self.widget.setWindowTitle(\"\
      Mesaj Dosyas\u0131 Se\xE7ici\")\n        layout = QtWidgets.QHBoxLayout(self.widget)\n\
      \        self.combo = QtWidgets.QComboBox(self.widget)\n        self.refresh_button\
      \ = QtWidgets.QPushButton(\"Yenile\", self.widget)\n        self.send_button\
      \ = QtWidgets.QPushButton(\"G\xF6nder\", self.widget)\n        layout.addWidget(self.combo)\n\
      \        layout.addWidget(self.refresh_button)\n        layout.addWidget(self.send_button)\n\
      \        self.widget.setLayout(layout)\n        self.refresh_button.clicked.connect(self.refresh_files)\n\
      \        self.combo.currentIndexChanged.connect(self.selection_changed)\n  \
      \      self.send_button.clicked.connect(self.send_file)\n        self.refresh_files()\n\
      \        self.widget.show()\n\n    def refresh_files(self):\n        self.combo.clear()\n\
      \        try:\n            files = [\n                f for f in os.listdir(self.directory)\n\
      \                if f.startswith(\"msg_\") and (f.endswith(\".dat\") or f.endswith(\"\
      .bin\"))\n            ]\n            files.sort()\n            self.combo.addItems(files)\n\
      \        except Exception as e:\n            print(\"Error listing files:\"\
      , e)\n\n    def selection_changed(self, index):\n        if index < 0:\n   \
      \         return\n        filename = self.combo.itemText(index)\n        full_path\
      \ = os.path.join(self.directory, filename)\n        self.pending_file = full_path\n\
      \        print(\"Selected file, click 'G\xF6nder' to send:\", full_path)\n\n\
      \    def send_file(self):\n        if self.pending_file is not None:\n     \
      \       print(\"Send button clicked. Loading file:\", self.pending_file)\n \
      \           self.load_file(self.pending_file)\n        else:\n            print(\"\
      Send button clicked but no file selected.\")\n\n    def load_file(self, file_path):\n\
      \        if os.path.exists(file_path) and os.path.isfile(file_path):\n     \
      \       try:\n                self.data = np.fromfile(file_path, dtype=np.complex64)\n\
      \                self.pointer = 0\n                self.file_selected = True\n\
      \                print(\"File loaded:\", file_path, \"Number of samples:\",\
      \ len(self.data))\n            except Exception as e:\n                print(\"\
      Error loading file:\", e)\n                self.data = None\n              \
      \  self.file_selected = False\n        else:\n            print(\"File does\
      \ not exist:\", file_path)\n            self.data = None\n            self.file_selected\
      \ = False\n\n    def work(self, input_items, output_items):\n        out = output_items[0]\n\
      \        n_out = len(out)\n        if self.data is None or not self.file_selected:\n\
      \            out[:] = np.zeros(n_out, dtype=np.complex64)\n            return\
      \ n_out\n        remaining = len(self.data) - self.pointer\n        if remaining\
      \ >= n_out:\n            out[:] = self.data[self.pointer:self.pointer+n_out]\n\
      \            self.pointer += n_out\n            if self.pointer >= len(self.data):\n\
      \                print(\"File transmission completed.\")\n                self.file_selected\
      \ = False\n            return n_out\n        else:\n            out[:remaining]\
      \ = self.data[self.pointer:]\n            out[remaining:] = np.zeros(n_out -\
      \ remaining, dtype=np.complex64)\n            self.pointer = len(self.data)\n\
      \            print(\"File transmission completed.\")\n            self.file_selected\
      \ = False\n            return n_out\n\n\n"
    affinity: ''
    alias: ''
    comment: ''
    directory: '''C:\\Users\\hakan\\Documents\\lora_recordings'''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('gui_file_source', 'gui_file_source', [('directory', "'C:\\\\Users\\\\hakan\\\\Documents\\\\lora_recordings'")],
      [], [('0', 'complex', 1)], '\n    This block creates a GUI (combo box, refresh
      button, and send button) listing message files \n    (msg_*.dat or msg_*.bin)
      in the specified directory (e.g., "C:\\Users\\hakan\\Documents\\lora_recordings").
      \n    Once the user selects a file and clicks the "Send" button, the file is
      read via np.fromfile() and replayed \n    as an IQ (np.complex64) stream. After
      the entire file has been sent (when replay is finished), \n    the block produces
      zero (0) samples and waits for a new selection.\n    ', ['directory'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [312, 536.0]
    rotation: 0
    state: enabled
- name: low_pass_filter_1
  id: low_pass_filter
  parameters:
    affinity: ''
    alias: ''
    beta: '6.76'
    comment: ''
    cutoff_freq: 360e3
    decim: '1'
    gain: '1'
    interp: '1'
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: samp_rate
    type: fir_filter_ccf
    width: 120e3
    win: window.WIN_HAMMING
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [512, 196.0]
    rotation: 0
    state: true
- name: osmosdr_sink_0_0
  id: osmosdr_sink
  parameters:
    affinity: ''
    alias: ''
    ant0: ''
    ant1: ''
    ant10: ''
    ant11: ''
    ant12: ''
    ant13: ''
    ant14: ''
    ant15: ''
    ant16: ''
    ant17: ''
    ant18: ''
    ant19: ''
    ant2: ''
    ant20: ''
    ant21: ''
    ant22: ''
    ant23: ''
    ant24: ''
    ant25: ''
    ant26: ''
    ant27: ''
    ant28: ''
    ant29: ''
    ant3: ''
    ant30: ''
    ant31: ''
    ant4: ''
    ant5: ''
    ant6: ''
    ant7: ''
    ant8: ''
    ant9: ''
    args: hackrf=0
    bb_gain0: '30'
    bb_gain1: '20'
    bb_gain10: '20'
    bb_gain11: '20'
    bb_gain12: '20'
    bb_gain13: '20'
    bb_gain14: '20'
    bb_gain15: '20'
    bb_gain16: '20'
    bb_gain17: '20'
    bb_gain18: '20'
    bb_gain19: '20'
    bb_gain2: '20'
    bb_gain20: '20'
    bb_gain21: '20'
    bb_gain22: '20'
    bb_gain23: '20'
    bb_gain24: '20'
    bb_gain25: '20'
    bb_gain26: '20'
    bb_gain27: '20'
    bb_gain28: '20'
    bb_gain29: '20'
    bb_gain3: '20'
    bb_gain30: '20'
    bb_gain31: '20'
    bb_gain4: '20'
    bb_gain5: '20'
    bb_gain6: '20'
    bb_gain7: '20'
    bb_gain8: '20'
    bb_gain9: '20'
    bw0: '0'
    bw1: '0'
    bw10: '0'
    bw11: '0'
    bw12: '0'
    bw13: '0'
    bw14: '0'
    bw15: '0'
    bw16: '0'
    bw17: '0'
    bw18: '0'
    bw19: '0'
    bw2: '0'
    bw20: '0'
    bw21: '0'
    bw22: '0'
    bw23: '0'
    bw24: '0'
    bw25: '0'
    bw26: '0'
    bw27: '0'
    bw28: '0'
    bw29: '0'
    bw3: '0'
    bw30: '0'
    bw31: '0'
    bw4: '0'
    bw5: '0'
    bw6: '0'
    bw7: '0'
    bw8: '0'
    bw9: '0'
    clock_source0: ''
    clock_source1: ''
    clock_source2: ''
    clock_source3: ''
    clock_source4: ''
    clock_source5: ''
    clock_source6: ''
    clock_source7: ''
    comment: ''
    corr0: '0'
    corr1: '0'
    corr10: '0'
    corr11: '0'
    corr12: '0'
    corr13: '0'
    corr14: '0'
    corr15: '0'
    corr16: '0'
    corr17: '0'
    corr18: '0'
    corr19: '0'
    corr2: '0'
    corr20: '0'
    corr21: '0'
    corr22: '0'
    corr23: '0'
    corr24: '0'
    corr25: '0'
    corr26: '0'
    corr27: '0'
    corr28: '0'
    corr29: '0'
    corr3: '0'
    corr30: '0'
    corr31: '0'
    corr4: '0'
    corr5: '0'
    corr6: '0'
    corr7: '0'
    corr8: '0'
    corr9: '0'
    freq0: center_freq
    freq1: 100e6
    freq10: 100e6
    freq11: 100e6
    freq12: 100e6
    freq13: 100e6
    freq14: 100e6
    freq15: 100e6
    freq16: 100e6
    freq17: 100e6
    freq18: 100e6
    freq19: 100e6
    freq2: 100e6
    freq20: 100e6
    freq21: 100e6
    freq22: 100e6
    freq23: 100e6
    freq24: 100e6
    freq25: 100e6
    freq26: 100e6
    freq27: 100e6
    freq28: 100e6
    freq29: 100e6
    freq3: 100e6
    freq30: 100e6
    freq31: 100e6
    freq4: 100e6
    freq5: 100e6
    freq6: 100e6
    freq7: 100e6
    freq8: 100e6
    freq9: 100e6
    gain0: '30'
    gain1: '10'
    gain10: '10'
    gain11: '10'
    gain12: '10'
    gain13: '10'
    gain14: '10'
    gain15: '10'
    gain16: '10'
    gain17: '10'
    gain18: '10'
    gain19: '10'
    gain2: '10'
    gain20: '10'
    gain21: '10'
    gain22: '10'
    gain23: '10'
    gain24: '10'
    gain25: '10'
    gain26: '10'
    gain27: '10'
    gain28: '10'
    gain29: '10'
    gain3: '10'
    gain30: '10'
    gain31: '10'
    gain4: '10'
    gain5: '10'
    gain6: '10'
    gain7: '10'
    gain8: '10'
    gain9: '10'
    if_gain0: '20'
    if_gain1: '20'
    if_gain10: '20'
    if_gain11: '20'
    if_gain12: '20'
    if_gain13: '20'
    if_gain14: '20'
    if_gain15: '20'
    if_gain16: '20'
    if_gain17: '20'
    if_gain18: '20'
    if_gain19: '20'
    if_gain2: '20'
    if_gain20: '20'
    if_gain21: '20'
    if_gain22: '20'
    if_gain23: '20'
    if_gain24: '20'
    if_gain25: '20'
    if_gain26: '20'
    if_gain27: '20'
    if_gain28: '20'
    if_gain29: '20'
    if_gain3: '20'
    if_gain30: '20'
    if_gain31: '20'
    if_gain4: '20'
    if_gain5: '20'
    if_gain6: '20'
    if_gain7: '20'
    if_gain8: '20'
    if_gain9: '20'
    maxoutbuf: '0'
    minoutbuf: '0'
    nchan: '1'
    num_mboards: '1'
    sample_rate: samp_rate
    sync: pc_clock
    time_source0: ''
    time_source1: ''
    time_source2: ''
    time_source3: ''
    time_source4: ''
    time_source5: ''
    time_source6: ''
    time_source7: ''
    type: fc32
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [752, 440.0]
    rotation: 0
    state: true
- name: rtlsdr_source_0
  id: rtlsdr_source
  parameters:
    affinity: ''
    alias: ''
    ant0: ''
    ant1: ''
    ant10: ''
    ant11: ''
    ant12: ''
    ant13: ''
    ant14: ''
    ant15: ''
    ant16: ''
    ant17: ''
    ant18: ''
    ant19: ''
    ant2: ''
    ant20: ''
    ant21: ''
    ant22: ''
    ant23: ''
    ant24: ''
    ant25: ''
    ant26: ''
    ant27: ''
    ant28: ''
    ant29: ''
    ant3: ''
    ant30: ''
    ant31: ''
    ant4: ''
    ant5: ''
    ant6: ''
    ant7: ''
    ant8: ''
    ant9: ''
    args: rtl=0,direct_sampling=0
    bb_gain0: '20'
    bb_gain1: '20'
    bb_gain10: '20'
    bb_gain11: '20'
    bb_gain12: '20'
    bb_gain13: '20'
    bb_gain14: '20'
    bb_gain15: '20'
    bb_gain16: '20'
    bb_gain17: '20'
    bb_gain18: '20'
    bb_gain19: '20'
    bb_gain2: '20'
    bb_gain20: '20'
    bb_gain21: '20'
    bb_gain22: '20'
    bb_gain23: '20'
    bb_gain24: '20'
    bb_gain25: '20'
    bb_gain26: '20'
    bb_gain27: '20'
    bb_gain28: '20'
    bb_gain29: '20'
    bb_gain3: '20'
    bb_gain30: '20'
    bb_gain31: '20'
    bb_gain4: '20'
    bb_gain5: '20'
    bb_gain6: '20'
    bb_gain7: '20'
    bb_gain8: '20'
    bb_gain9: '20'
    bw0: '0'
    bw1: '0'
    bw10: '0'
    bw11: '0'
    bw12: '0'
    bw13: '0'
    bw14: '0'
    bw15: '0'
    bw16: '0'
    bw17: '0'
    bw18: '0'
    bw19: '0'
    bw2: '0'
    bw20: '0'
    bw21: '0'
    bw22: '0'
    bw23: '0'
    bw24: '0'
    bw25: '0'
    bw26: '0'
    bw27: '0'
    bw28: '0'
    bw29: '0'
    bw3: '0'
    bw30: '0'
    bw31: '0'
    bw4: '0'
    bw5: '0'
    bw6: '0'
    bw7: '0'
    bw8: '0'
    bw9: '0'
    clock_source0: ''
    clock_source1: ''
    clock_source2: ''
    clock_source3: ''
    clock_source4: ''
    clock_source5: ''
    clock_source6: ''
    clock_source7: ''
    comment: ''
    corr0: '0'
    corr1: '0'
    corr10: '0'
    corr11: '0'
    corr12: '0'
    corr13: '0'
    corr14: '0'
    corr15: '0'
    corr16: '0'
    corr17: '0'
    corr18: '0'
    corr19: '0'
    corr2: '0'
    corr20: '0'
    corr21: '0'
    corr22: '0'
    corr23: '0'
    corr24: '0'
    corr25: '0'
    corr26: '0'
    corr27: '0'
    corr28: '0'
    corr29: '0'
    corr3: '0'
    corr30: '0'
    corr31: '0'
    corr4: '0'
    corr5: '0'
    corr6: '0'
    corr7: '0'
    corr8: '0'
    corr9: '0'
    dc_offset_mode0: '0'
    dc_offset_mode1: '0'
    dc_offset_mode10: '0'
    dc_offset_mode11: '0'
    dc_offset_mode12: '0'
    dc_offset_mode13: '0'
    dc_offset_mode14: '0'
    dc_offset_mode15: '0'
    dc_offset_mode16: '0'
    dc_offset_mode17: '0'
    dc_offset_mode18: '0'
    dc_offset_mode19: '0'
    dc_offset_mode2: '0'
    dc_offset_mode20: '0'
    dc_offset_mode21: '0'
    dc_offset_mode22: '0'
    dc_offset_mode23: '0'
    dc_offset_mode24: '0'
    dc_offset_mode25: '0'
    dc_offset_mode26: '0'
    dc_offset_mode27: '0'
    dc_offset_mode28: '0'
    dc_offset_mode29: '0'
    dc_offset_mode3: '0'
    dc_offset_mode30: '0'
    dc_offset_mode31: '0'
    dc_offset_mode4: '0'
    dc_offset_mode5: '0'
    dc_offset_mode6: '0'
    dc_offset_mode7: '0'
    dc_offset_mode8: '0'
    dc_offset_mode9: '0'
    freq0: center_freq
    freq1: 100e6
    freq10: 100e6
    freq11: 100e6
    freq12: 100e6
    freq13: 100e6
    freq14: 100e6
    freq15: 100e6
    freq16: 100e6
    freq17: 100e6
    freq18: 100e6
    freq19: 100e6
    freq2: 100e6
    freq20: 100e6
    freq21: 100e6
    freq22: 100e6
    freq23: 100e6
    freq24: 100e6
    freq25: 100e6
    freq26: 100e6
    freq27: 100e6
    freq28: 100e6
    freq29: 100e6
    freq3: 100e6
    freq30: 100e6
    freq31: 100e6
    freq4: 100e6
    freq5: 100e6
    freq6: 100e6
    freq7: 100e6
    freq8: 100e6
    freq9: 100e6
    gain0: '40'
    gain1: '10'
    gain10: '10'
    gain11: '10'
    gain12: '10'
    gain13: '10'
    gain14: '10'
    gain15: '10'
    gain16: '10'
    gain17: '10'
    gain18: '10'
    gain19: '10'
    gain2: '10'
    gain20: '10'
    gain21: '10'
    gain22: '10'
    gain23: '10'
    gain24: '10'
    gain25: '10'
    gain26: '10'
    gain27: '10'
    gain28: '10'
    gain29: '10'
    gain3: '10'
    gain30: '10'
    gain31: '10'
    gain4: '10'
    gain5: '10'
    gain6: '10'
    gain7: '10'
    gain8: '10'
    gain9: '10'
    gain_mode0: 'False'
    gain_mode1: 'False'
    gain_mode10: 'False'
    gain_mode11: 'False'
    gain_mode12: 'False'
    gain_mode13: 'False'
    gain_mode14: 'False'
    gain_mode15: 'False'
    gain_mode16: 'False'
    gain_mode17: 'False'
    gain_mode18: 'False'
    gain_mode19: 'False'
    gain_mode2: 'False'
    gain_mode20: 'False'
    gain_mode21: 'False'
    gain_mode22: 'False'
    gain_mode23: 'False'
    gain_mode24: 'False'
    gain_mode25: 'False'
    gain_mode26: 'False'
    gain_mode27: 'False'
    gain_mode28: 'False'
    gain_mode29: 'False'
    gain_mode3: 'False'
    gain_mode30: 'False'
    gain_mode31: 'False'
    gain_mode4: 'False'
    gain_mode5: 'False'
    gain_mode6: 'False'
    gain_mode7: 'False'
    gain_mode8: 'False'
    gain_mode9: 'False'
    if_gain0: '20'
    if_gain1: '20'
    if_gain10: '20'
    if_gain11: '20'
    if_gain12: '20'
    if_gain13: '20'
    if_gain14: '20'
    if_gain15: '20'
    if_gain16: '20'
    if_gain17: '20'
    if_gain18: '20'
    if_gain19: '20'
    if_gain2: '20'
    if_gain20: '20'
    if_gain21: '20'
    if_gain22: '20'
    if_gain23: '20'
    if_gain24: '20'
    if_gain25: '20'
    if_gain26: '20'
    if_gain27: '20'
    if_gain28: '20'
    if_gain29: '20'
    if_gain3: '20'
    if_gain30: '20'
    if_gain31: '20'
    if_gain4: '20'
    if_gain5: '20'
    if_gain6: '20'
    if_gain7: '20'
    if_gain8: '20'
    if_gain9: '20'
    iq_balance_mode0: '0'
    iq_balance_mode1: '0'
    iq_balance_mode10: '0'
    iq_balance_mode11: '0'
    iq_balance_mode12: '0'
    iq_balance_mode13: '0'
    iq_balance_mode14: '0'
    iq_balance_mode15: '0'
    iq_balance_mode16: '0'
    iq_balance_mode17: '0'
    iq_balance_mode18: '0'
    iq_balance_mode19: '0'
    iq_balance_mode2: '0'
    iq_balance_mode20: '0'
    iq_balance_mode21: '0'
    iq_balance_mode22: '0'
    iq_balance_mode23: '0'
    iq_balance_mode24: '0'
    iq_balance_mode25: '0'
    iq_balance_mode26: '0'
    iq_balance_mode27: '0'
    iq_balance_mode28: '0'
    iq_balance_mode29: '0'
    iq_balance_mode3: '0'
    iq_balance_mode30: '0'
    iq_balance_mode31: '0'
    iq_balance_mode4: '0'
    iq_balance_mode5: '0'
    iq_balance_mode6: '0'
    iq_balance_mode7: '0'
    iq_balance_mode8: '0'
    iq_balance_mode9: '0'
    maxoutbuf: '0'
    minoutbuf: '0'
    nchan: '1'
    num_mboards: '1'
    sample_rate: samp_rate
    sync: pc_clock
    time_source0: ''
    time_source1: ''
    time_source2: ''
    time_source3: ''
    time_source4: ''
    time_source5: ''
    time_source6: ''
    time_source7: ''
    type: fc32
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [144, 156.0]
    rotation: 0
    state: true

connections:
- [epy_block_1, '0', osmosdr_sink_0_0, '0']
- [low_pass_filter_1, '0', epy_block_0, '0']
- [rtlsdr_source_0, '0', low_pass_filter_1, '0']

metadata:
  file_format: 1
  grc_version: 3.10.12.0
